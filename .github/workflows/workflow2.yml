name: DAMX Build and Package

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.9.1)'
        required: true
        type: string
      is_prerelease:
        description: 'Is this a pre-release?'
        required: true
        type: boolean
        default: false
      publish_release:
        description: 'Publish the release?'
        required: true
        type: boolean
        default: true
      drivers_version:
        description: 'Drivers version to use'
        required: true
        type: choice
        default: 'div-linuwu-sense'
        options:
        - 'div-linuwu-sense'
        - 'linuwu-sense'

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main repository
      uses: actions/checkout@v4
      with:
        path: Div-Acer-Manager-Max
    
    - name: Download and Setup Drivers
      run: |
        echo "Setting up drivers: ${{ inputs.drivers_version }}"
        
        if [ "${{ inputs.drivers_version }}" == "linuwu-sense" ]; then
          echo "Downloading original Linuwu-Sense drivers..."
          git clone https://github.com/0x7375646F/Linuwu-Sense.git drivers-temp
        else
          echo "Downloading Div-Linuwu-Sense drivers..."
          git clone https://github.com/PXDiv/Div-Linuwu-Sense.git drivers-temp
        fi
        
        echo "âœ“ Drivers repository cloned successfully"
        ls -la drivers-temp/
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Install PyInstaller
      run: |
        pip install pyinstaller
    
    - name: Detect versions from source files
      id: versions
      run: |
        # Detect GUI version
        GUI_VERSION=$(grep -oP 'private readonly string ProjectVersion\s*=\s*"\K[\d.]+' Div-Acer-Manager-Max/DivAcerManagerMax/MainWindow.axaml.cs || echo "unknown")
        echo "gui_version=$GUI_VERSION" >> $GITHUB_OUTPUT
        
        # Detect daemon version  
        DAEMON_VERSION=$(grep -oP 'VERSION\s*=\s*"\K[\d.]+' Div-Acer-Manager-Max/DAMM-Daemon/DAMX-Daemon.py || echo "unknown")
        echo "daemon_version=$DAEMON_VERSION" >> $GITHUB_OUTPUT
        
        # Detect drivers version based on selected drivers
        if [ "${{ inputs.drivers_version }}" == "linuwu-sense" ]; then
          DRIVERS_VERSION=$(grep -oP '#define\s+DRIVER_VERSION\s+"\K[\d.]+' drivers-temp/src/linuwu_sense.c || echo "unknown")
        else
          DRIVERS_VERSION=$(grep -oP '#define\s+DRIVER_VERSION\s+"\K[\d.]+' drivers-temp/src/linuwu_sense.c || echo "unknown")
        fi
        echo "drivers_version=$DRIVERS_VERSION" >> $GITHUB_OUTPUT
        echo "drivers_type=${{ inputs.drivers_version }}" >> $GITHUB_OUTPUT
        
        echo "Detected versions:"
        echo "  GUI: $GUI_VERSION"
        echo "  Daemon: $DAEMON_VERSION" 
        echo "  Drivers: $DRIVERS_VERSION (${{ inputs.drivers_version }})"
    
    - name: Build Python Daemon
      run: |
        cd Div-Acer-Manager-Max/DAMM-Daemon
        
        # Install dependencies if requirements.txt exists
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Build with PyInstaller
        pyinstaller --onefile --clean DAMX-Daemon.py
        
        echo "âœ“ Daemon built successfully"
        ls -la dist/
    
    - name: Build .NET GUI
      run: |
        cd Div-Acer-Manager-Max/DivAcerManagerMax
        
        dotnet publish \
          -c Release \
          -f net9.0 \
          -r linux-x64 \
          --self-contained true \
          /p:PublishSingleFile=true \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          /p:IncludeAllContentForSelfExtract=true
        
        echo "âœ“ GUI built successfully"
        ls -la bin/Release/net9.0/linux-x64/publish/
    
    - name: Create Package Structure
      run: |
        # Use GUI version as main package version
        PACKAGE_VERSION="${{ steps.versions.outputs.gui_version }}"
        PACKAGE_DIR="DAMX-${PACKAGE_VERSION}"
        
        echo "Creating package directory: $PACKAGE_DIR"
        mkdir -p "$PACKAGE_DIR"/{DAMX-Daemon,DAMX-GUI,Linuwu-Sense}
        
        echo "package_dir=$PACKAGE_DIR" >> $GITHUB_ENV
        echo "package_version=$PACKAGE_VERSION" >> $GITHUB_ENV
    
    - name: Copy Daemon Executable
      run: |
        cp Div-Acer-Manager-Max/DAMM-Daemon/dist/DAMX-Daemon "${{ env.package_dir }}/DAMX-Daemon/"
        chmod +x "${{ env.package_dir }}/DAMX-Daemon/DAMX-Daemon"
        echo "âœ“ Daemon executable copied"
    
    - name: Copy GUI Executable and Icons
      run: |
        # Copy the main executable
        find Div-Acer-Manager-Max/DivAcerManagerMax/bin/Release/net9.0/linux-x64/publish/ -type f -executable -name "*DivAcerManagerMax*" -exec cp {} "${{ env.package_dir }}/DAMX-GUI/DivAcerManagerMax" \;
        
        # If no specific executable found, copy the first executable
        if [ ! -f "${{ env.package_dir }}/DAMX-GUI/DivAcerManagerMax" ]; then
          find Div-Acer-Manager-Max/DivAcerManagerMax/bin/Release/net9.0/linux-x64/publish/ -type f -executable | head -1 | xargs -I {} cp {} "${{ env.package_dir }}/DAMX-GUI/DivAcerManagerMax"
        fi
        
        chmod +x "${{ env.package_dir }}/DAMX-GUI/DivAcerManagerMax"
        
        # Copy icon files if they exist
        if [ -f "Div-Acer-Manager-Max/DivAcerManagerMax/icon.png" ]; then
          cp "Div-Acer-Manager-Max/DivAcerManagerMax/icon.png" "${{ env.package_dir }}/DAMX-GUI/"
        fi
        
        if [ -f "Div-Acer-Manager-Max/DivAcerManagerMax/iconTransparent.png" ]; then
          cp "Div-Acer-Manager-Max/DivAcerManagerMax/iconTransparent.png" "${{ env.package_dir }}/DAMX-GUI/"
        fi
        
        echo "âœ“ GUI executable and icons copied"
    
    - name: Copy Drivers
      run: |
        cp -r drivers-temp/* "${{ env.package_dir }}/Linuwu-Sense/"
        echo "âœ“ Drivers copied"
    
    - name: Copy and Update Setup Script
      run: |
        if [ -f "Div-Acer-Manager-Max/scripts/local-setup.sh" ]; then
          cp "Div-Acer-Manager-Max/scripts/local-setup.sh" "${{ env.package_dir }}/setup.sh"
        elif [ -f "scripts/local-setup.sh" ]; then
          cp "scripts/local-setup.sh" "${{ env.package_dir }}/setup.sh"
        else
          echo "Warning: local-setup.sh not found, creating a basic one"
          cat > "${{ env.package_dir }}/setup.sh" << 'EOF'
        #!/bin/bash
        # DAMX Installation Script
        echo "DAMX Installation"
        echo "=================="
        echo "Please run the installation manually or provide a proper setup.sh script"
        EOF
        fi
        
        # Update version information in setup script
        sed -i "s/SCRIPT_VERSION\s*=\s*\".*\"/SCRIPT_VERSION=\"${{ steps.versions.outputs.gui_version }}\"/g" "${{ env.package_dir }}/setup.sh"
        sed -i "s/PROJECT_VERSION\s*=\s*.*/PROJECT_VERSION=${{ steps.versions.outputs.gui_version }}/g" "${{ env.package_dir }}/setup.sh"
        sed -i "s/DAEMON_VERSION\s*=\s*.*/DAEMON_VERSION=${{ steps.versions.outputs.daemon_version }}/g" "${{ env.package_dir }}/setup.sh"
        sed -i "s/DRIVERS_VERSION\s*=\s*.*/DRIVERS_VERSION=${{ steps.versions.outputs.drivers_version }}/g" "${{ env.package_dir }}/setup.sh"
        
        chmod +x "${{ env.package_dir }}/setup.sh"
        echo "âœ“ Setup script updated and made executable"
    
    - name: Create Release Information
      run: |
        cat > "${{ env.package_dir }}/release.txt" << EOF
        DAMX Release Information
        ========================
        
        Project Version: ${{ steps.versions.outputs.gui_version }}
        Daemon Version: ${{ steps.versions.outputs.daemon_version }}
        Drivers Version: ${{ steps.versions.outputs.drivers_version }}
        
        Build Date: $(date)
        Built on: $(uname -a)
        GitHub Run: ${{ github.run_number }}
        Commit: ${{ github.sha }}
        
        Components:
        - DAMX-Daemon: Python daemon compiled with PyInstaller
        - DAMX-GUI: .NET 9.0 GUI application (self-contained)
        - Linuwu-Sense: Hardware drivers
        - setup.sh: Installation script
        EOF
        
        echo "âœ“ Release information created"
    
    - name: Create Package Archive
      run: |
        # Create tar.xz archive
        tar -cJf "${{ env.package_dir }}.tar.xz" "${{ env.package_dir }}"
        
        # Generate checksums
        sha256sum "${{ env.package_dir }}.tar.xz" > "${{ env.package_dir }}.tar.xz.sha256"
        
        echo "âœ“ Package archive created"
        echo "Archive size: $(du -h ${{ env.package_dir }}.tar.xz | cut -f1)"
    
    - name: Display Package Contents
      run: |
        echo "ðŸ“¦ Package Contents:"
        find "${{ env.package_dir }}" -type f -exec ls -lh {} \; | sort
        
        echo ""
        echo "ðŸ“‹ Package Summary:"
        echo "Package: ${{ env.package_dir }}.tar.xz"
        echo "Size: $(du -h ${{ env.package_dir }}.tar.xz | cut -f1)"
        echo "Checksum: $(cat ${{ env.package_dir }}.tar.xz.sha256)"
    
    - name: Create GitHub Release and Upload Assets
      if: ${{ inputs.publish_release }}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT_RELEASE }}
      run: |
        # Create release using GitHub CLI
        gh release create "${{ inputs.tag }}" \
          --title "DAMX ${{ inputs.tag }}" \
          --notes "# DAMX Release ${{ inputs.tag }}
        
        ## Version Information
        - **Project Version**: ${{ steps.versions.outputs.gui_version }}
        - **Daemon Version**: ${{ steps.versions.outputs.daemon_version }}
        - **Drivers Version**: ${{ steps.versions.outputs.drivers_version }}
        - **Drivers Type**: ${{ steps.versions.outputs.drivers_type }}
        
        ## Components
        - **DAMX-Daemon**: Python daemon compiled with PyInstaller
        - **DAMX-GUI**: .NET 9.0 GUI application (self-contained, linux-x64)
        - **Linuwu-Sense**: Hardware drivers (${{ steps.versions.outputs.drivers_type }})
        - **setup.sh**: Installation script
        
        ## Installation
        1. Download the \`${{ env.package_dir }}.tar.xz\` file
        2. Extract: \`tar -xJf ${{ env.package_dir }}.tar.xz\`
        3. Run: \`cd ${{ env.package_dir }} && ./setup.sh\`
        
        ## Checksums
        \`\`\`
        $(cat ${{ env.package_dir }}.tar.xz.sha256)
        \`\`\`
        
        ---
        Built on: $(date)  
        Commit: ${{ github.sha }}" \
          ${{ inputs.is_prerelease == true && '--prerelease' || '' }} \
          "${{ env.package_dir }}.tar.xz" \
          "${{ env.package_dir }}.tar.xz.sha256"
        
        echo "âœ“ Release created and assets uploaded successfully"
    
    - name: Build Summary
      run: |
        echo "ðŸŽ‰ Build and packaging completed successfully!"
        echo ""
        echo "ðŸ“Š Build Summary:"
        echo "- Tag: ${{ inputs.tag }}"
        echo "- Pre-release: ${{ inputs.is_prerelease }}"
        echo "- Published: ${{ inputs.publish_release }}"
        echo "- Drivers: ${{ inputs.drivers_version }}"
        echo "- Package: ${{ env.package_dir }}.tar.xz"
        echo "- Size: $(du -h ${{ env.package_dir }}.tar.xz | cut -f1)"
        
        if [ "${{ inputs.publish_release }}" == "true" ]; then
          echo "- Release created with assets uploaded"
        fi
